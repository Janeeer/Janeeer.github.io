<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Janeeer.github.io</id>
    <title>Jane Wei</title>
    <updated>2020-11-19T17:14:30.260Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Janeeer.github.io"/>
    <link rel="self" href="https://Janeeer.github.io/atom.xml"/>
    <subtitle>千里之行始于足下</subtitle>
    <logo>https://Janeeer.github.io/images/avatar.png</logo>
    <icon>https://Janeeer.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Jane Wei</rights>
    <entry>
        <title type="html"><![CDATA[电力系统潮流分析的计算机解法（一）使用NR法的一个简单例子]]></title>
        <id>https://Janeeer.github.io/post/dian-li-xi-tong-chao-liu-fen-xi-de-ji-suan-ji-jie-fa-yi-shi-yong-nr-fa-de-yi-ge-jian-dan-li-zi/</id>
        <link href="https://Janeeer.github.io/post/dian-li-xi-tong-chao-liu-fen-xi-de-ji-suan-ji-jie-fa-yi-shi-yong-nr-fa-de-yi-ge-jian-dan-li-zi/">
        </link>
        <updated>2020-11-19T16:18:29.000Z</updated>
        <summary type="html"><![CDATA[<p>潮流计算相关的文章有很多，本篇想通过一个简单的例子展示Newton-Raphson法做潮流计算的过程，以便理解算法，理清潮流计算的思路。</p>
]]></summary>
        <content type="html"><![CDATA[<p>潮流计算相关的文章有很多，本篇想通过一个简单的例子展示Newton-Raphson法做潮流计算的过程，以便理解算法，理清潮流计算的思路。</p>
<!-- more -->
<h2 id="简单介绍">简单介绍</h2>
<p>潮流问题是给出 负载端消耗的有功和无功功率，及发电机端的机端电压大小和注入有功功率，来获取电力系统中 每个母线的电压相角和幅值信息，进一步可以通过数值确定每个分支上的有功和无功功率流以及发电机无功功率输出。也就是最终可以画出类似这样的运行示意图：<br>
<img src="https://Janeeer.github.io/post-images/1605803198010.png" alt="" loading="lazy"><br>
根据这个图，容易分析系统连接负载的能力，做出规划，适当调整发电机出力和变压器抽头的位置，从而控制母线电压，优化发电机组运行。<br>
潮流计算首先需要对网络原始数据进行处理：<br>
对网络中的线路及变压器均采用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Π</mi></mrow><annotation encoding="application/x-tex">\Pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Π</span></span></span></span>型等效，可得到系统节点导纳矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Y</mi><mrow><mi>b</mi><mi>u</mi><mi>s</mi></mrow></msub><mo>=</mo><mi>G</mi><mo>+</mo><mi>j</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">Y_{bus}=G+jB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span>。<br>
对每个节点（P 、Q均为注入功率， U， θ），由功率平衡可得：<br>
<img src="https://Janeeer.github.io/post-images/1605803277840.png" alt="" loading="lazy"></p>
<h2 id="newton-raphson迭代法">Newton-Raphson迭代法</h2>
<p>NR迭代法是潮流计算中最普遍的解法。对功率平衡方程泰勒展开，忽略高阶项有<img src="https://Janeeer.github.io/post-images/1605803307507.png" alt="" loading="lazy">即<br>
<img src="https://Janeeer.github.io/post-images/1605803322563.png" alt="" loading="lazy"><br>
两边左乘系数矩阵的逆，得到迭代方程组：<br>
<img src="https://Janeeer.github.io/post-images/1605803349464.png" alt="" loading="lazy"><br>
到此，可以得到NR法潮流计算的完整过程：</p>
<ol>
<li>根据所给数据，划分节点类型，得到导纳矩阵Y，一般设定初值相角<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span>为0、电压幅值<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span></span></span></span>为1.0pu</li>
<li>根据电压相角和幅值求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi><mover accent="true"><mi>P</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\Delta \vec{P}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663299999999999em;vertical-align:0em;"></span><span class="mord">Δ</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi><mover accent="true"><mi>Q</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\Delta \vec{Q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1607699999999999em;vertical-align:-0.19444em;"></span><span class="mord">Δ</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">Q</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span></li>
<li><strong>生成雅可比矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>J</mi></mrow><annotation encoding="application/x-tex">J</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span></span></span></span></strong></li>
<li><strong>解迭代方程组，得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi><mover accent="true"><mi>x</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\Delta \vec{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord">Δ</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></strong></li>
<li>更新<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>x</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></li>
<li>判断是否复合精度要求，不符合则回到第2步</li>
</ol>
<h2 id="一个使用nr法的简单栗子">一个使用NR法的简单栗子</h2>
<p><img src="https://Janeeer.github.io/post-images/1605803678942.png" alt="" loading="lazy"><br>
这是一个两节点的网络，根据题意可得到一个2x2节点导纳矩阵，题中line charging 5MVAr可以算线路对地导纳，15MVAr算无功补偿的电容的参数。节点1是Vθ节点，节点2是PQ节点。<br>
matlab代码实现如下：首先列写P、Q及雅可比矩阵J与U、θ 的关系式，U、θ 是系统变量。<br>
(Gridea似乎不能高亮代码块，将就一下先)<br>
<code>syms theta U;</code><br>
<code>x=[theta;U];</code><br>
<code>Psp=-1.2;Qsp=-0.5;%dPQ=[0;0]</code><br>
<code>U1=1.05;x1=0;</code><br>
<code>G21=-5;B21=15;G22=5;B22=-14.8;</code><br>
<code>deltaP=Psp-U*(U1*(G21*cos(theta-x1)+B21*sin(theta-x1))+U*G22);</code><br>
<code>deltaQ=Qsp-U*(U1*(G21*sin(theta-x1)-B21*cos(theta-x1))+U*(-B22));</code><br>
<code>deltaPQ=[deltaP;deltaQ];</code><br>
<code>J=jacobian(deltaPQ,x);</code><br>
<code></code><br>
<code>xx=[0.0;1.0];%initial value</code><br>
<code>dx=[1;1];</code><br>
<code>time=0;</code><br>
<code>while norm(dx)&gt;1e-3</code><br>
<code>dPQ=eval(subs(deltaPQ,x,xx));</code><br>
<code>JJ=eval(subs(J,x,xx));</code><br>
<code>dx=-inv(JJ)*dPQ;</code><br>
<code>xx=xx+dx;</code><br>
<code>vpa(xx,8) %display format</code><br>
<code>time=time+1;</code><br>
<code>end</code><br>
运行结果：<br>
-0.06254873<br>
1.0063646</p>
<p>可以看到，示例代码里调用了很多matlab自带的函数，其中有几处可以继续做文章：</p>
<ul>
<li>从NR法介绍可以看出，它老老实实计算了完整的雅可比矩阵，而实际线路中电阻值远小于电抗值，从功率方程可以看到无功功率与电压大小密切相关，而有功功率与电压相角密切相关，根据这个特点，可以采用PQ解耦法来简化迭代方程，基本将雅可比矩阵换成了节点导纳矩阵。还有XB快速解耦法和BX方法，这两种方法都是对PQ解耦法的进一步简化，只是简化过程中忽略的参量不同。</li>
<li>如果使用NR法进行潮流计算，需要生成雅可比矩阵，若不直接用jacobian函数，可以采用手动求解法和自动微分法。</li>
<li>除了NR迭代法，还有Gauss-Seidel迭代法，若进一步在迭代过程中引入松弛因子可以加速收敛速度，即SOR方法。</li>
<li>对于最关键的一步——求解迭代线性方程组，示例代码直接调用inv函数，也可以选用其他线性方程组数值求解的算法，如<strong>LU分解，共轭梯度法(CG)，全正交化法(FOM)及广义最小残量法(GMRES)，而且由于系数矩阵含有大量零元素，还可以利用稀疏矩阵算法进行优化。</strong></li>
</ul>
<p>线性方程组求解这部分将会在接下来的博文中继续介绍~</p>
<pre><code>内容参考《电力系统潮流分析的计算机解法》课程课件，前辈博客，维基百科，及同学和自己的课程作业报告。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello]]></title>
        <id>https://Janeeer.github.io/post/hello/</id>
        <link href="https://Janeeer.github.io/post/hello/">
        </link>
        <updated>2020-11-16T07:29:48.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>